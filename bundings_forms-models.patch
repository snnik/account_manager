Index: core/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/migrations/0001_initial.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
+++ core/migrations/0001_initial.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
@@ -1,33 +0,0 @@
-# Generated by Django 2.1.7 on 2019-04-14 20:27
-
-from django.conf import settings
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Contract',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('number', models.CharField(max_length=10)),
-                ('customer', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Services',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('name', models.CharField(max_length=20)),
-                ('description', models.CharField(max_length=50)),
-                ('status', models.BooleanField()),
-            ],
-        ),
-    ]
Index: core/migrations/0002_auto_20190430_0959.py
===================================================================
--- core/migrations/0002_auto_20190430_0959.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
+++ core/migrations/0002_auto_20190430_0959.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
@@ -1,78 +0,0 @@
-# Generated by Django 2.2 on 2019-04-30 06:59
-
-from django.conf import settings
-import django.core.validators
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
-        ('auth', '0011_update_proxy_permissions'),
-        ('core', '0001_initial'),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='CoreProtocol',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('action', models.CharField(max_length=200)),
-                ('user', models.CharField(max_length=200)),
-                ('action_date', models.DateTimeField(auto_now_add=True)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='CustomerInfo',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('description', models.CharField(max_length=100, verbose_name='Наименование')),
-                ('OGRN', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Введите цифры', regex='^\\d{9,15}$')], verbose_name='ОГРН')),
-                ('INN', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Введите цифры', regex='^\\d{9,15}$')], verbose_name='ИНН')),
-                ('KPP', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Введите цифры', regex='^\\d{9,15}$')], verbose_name='КПП')),
-                ('legal_address', models.CharField(blank=True, max_length=250, verbose_name='Адрес фактический')),
-                ('postal_address', models.CharField(blank=True, max_length=250, verbose_name='Адрес юридический')),
-                ('phone_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Телефонный номер должен быть иметь следующий формат: '+999999999'. Максимальное количество цифр 15.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Номер телефона')),
-                ('email_address', models.CharField(max_length=15, validators=[django.core.validators.EmailValidator()], verbose_name='Электронная почта')),
-                ('is_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
-                ('is_update', models.DateTimeField(auto_now=True, verbose_name='Дата модификации')),
-                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Package',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('description', models.CharField(max_length=50, verbose_name='Наименование')),
-                ('status', models.BooleanField(default=True, verbose_name='Активен')),
-                ('is_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
-                ('is_update', models.DateTimeField(auto_now=True, verbose_name='Дата модификации')),
-                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Service',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('description', models.CharField(max_length=50, verbose_name='Наименование')),
-                ('url', models.SlugField(unique=True, verbose_name='URI ресурса')),
-                ('price', models.FloatField(blank=True, verbose_name='Цена')),
-                ('status', models.BooleanField(default=True, verbose_name='Статус')),
-                ('is_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
-                ('is_update', models.DateTimeField(auto_now=True, verbose_name='Дата модификации')),
-                ('fk_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
-            ],
-        ),
-        migrations.RemoveField(
-            model_name='contract',
-            name='customer',
-        ),
-        migrations.DeleteModel(
-            name='Services',
-        ),
-        migrations.DeleteModel(
-            name='Contract',
-        ),
-    ]
Index: core/migrations/0003_auto_20190430_1136.py
===================================================================
--- core/migrations/0003_auto_20190430_1136.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
+++ core/migrations/0003_auto_20190430_1136.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
@@ -1,23 +0,0 @@
-# Generated by Django 2.2 on 2019-04-30 08:36
-
-from django.conf import settings
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
-        ('core', '0002_auto_20190430_0959'),
-    ]
-
-    operations = [
-        migrations.RenameModel(
-            old_name='CustomerInfo',
-            new_name='Customer',
-        ),
-        migrations.RenameModel(
-            old_name='CoreProtocol',
-            new_name='Protocol',
-        ),
-    ]
Index: core/migrations/0004_auto_20190430_1540.py
===================================================================
--- core/migrations/0004_auto_20190430_1540.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
+++ core/migrations/0004_auto_20190430_1540.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
@@ -1,40 +0,0 @@
-# Generated by Django 2.2 on 2019-04-30 12:40
-
-from django.conf import settings
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core', '0003_auto_20190430_1136'),
-    ]
-
-    operations = [
-        migrations.RemoveField(
-            model_name='service',
-            name='price',
-        ),
-        migrations.AddField(
-            model_name='package',
-            name='price',
-            field=models.FloatField(blank=True, default=0, verbose_name='Цена'),
-            preserve_default=False,
-        ),
-        migrations.AlterField(
-            model_name='customer',
-            name='customer',
-            field=models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
-        ),
-        migrations.AlterField(
-            model_name='package',
-            name='group',
-            field=models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group'),
-        ),
-        migrations.AlterField(
-            model_name='service',
-            name='fk_permission',
-            field=models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Permission'),
-        ),
-    ]
Index: core/migrations/0005_auto_20190504_1058.py
===================================================================
--- core/migrations/0005_auto_20190504_1058.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
+++ core/migrations/0005_auto_20190504_1058.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
@@ -1,34 +0,0 @@
-# Generated by Django 2.2 on 2019-05-04 07:58
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core', '0004_auto_20190430_1540'),
-    ]
-
-    operations = [
-        migrations.RemoveField(
-            model_name='service',
-            name='url',
-        ),
-        migrations.AddField(
-            model_name='package',
-            name='shortcut_path',
-            field=models.TextField(default='', verbose_name='Путь к ярлыку'),
-            preserve_default=False,
-        ),
-        migrations.AddField(
-            model_name='package',
-            name='url',
-            field=models.SlugField(default=' ', unique=True, verbose_name='URI ресурса'),
-            preserve_default=False,
-        ),
-        migrations.AlterField(
-            model_name='protocol',
-            name='user',
-            field=models.CharField(default='Django admin', max_length=200),
-        ),
-    ]
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
+++ .gitignore	(date 1557110534340)
@@ -1,4 +1,4 @@
-.vscode/*
+vscode/*
 .idea/*
 amenv/*
 .env
Index: core/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/models.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
+++ core/models.py	(date 1557115273292)
@@ -26,18 +26,18 @@
             action = 'add'
         try:
             super(Service, self).save(*args, **kwargs)
-            log.save(user=kwargs['username'], action=action, obj=str(self), obj_id=self.pk, table=table)
+            log.save(user=kwargs.get('username'), action=action, obj=str(self), obj_id=self.pk, table=table)
             #Связь с разрешениями
-        except Exception:
-            log.save(user=kwargs['username'], action=action, obj=str(self), obj_id=self.pk, table=table, error=str(Exception))
+        except Exception as e:
+            log.save(user=kwargs.get('username'), action=action, obj=str(self), obj_id=self.pk, table=table, error=str(e))
 
     def not_active(self, **kwargs):
         self.status = False
-        self.save(username=kwargs['username'])
+        self.save(username=kwargs.get('username'))
 
     def active(self, **kwargs):
         self.status = True
-        self.save(username=kwargs['username'])
+        self.save(username=kwargs.get('username'))
 
     def delete(self, *args, **kwargs):
         log = Protocol()
@@ -45,9 +45,9 @@
         table = 'core_service'
         try:
             super(Service, self).delete(using=None, keep_parents=False)
-            log.save(user=kwargs['username'], action=action, obj=str(self), obj_id=self.pk, table=table)
-        except Exception:
-            log.save(user=kwargs['username'], action=action, obj=str(self), obj_id=self.pk, table=table, error=str(Exception))
+            log.save(user=kwargs.get('username'), action=action, obj=str(self), obj_id=self.pk, table=table)
+        except Exception as e:
+            log.save(user=kwargs.get('username'), action=action, obj=str(self), obj_id=self.pk, table=table, error=str(e))
 
     def __str__(self):
         return str(self.description)
@@ -92,16 +92,8 @@
         return self.description
 
     def save(self, *args, **kwargs):
-        for key in kwargs:
-            if key == 'username':
-                usr = kwargs[key]
-            else:
-                usr = None
-
-            if key == 'password':
-                password = kwargs[key]
-            else:
-                password = None
+        usr = kwargs.get('username')
+        password = kwargs.get('password')
 
         if not self.pk:
             action = 'add'
@@ -112,9 +104,7 @@
             try:
                 user = User.objects.create_user(username=login, password=password)
                 log.save(action=action, obj=str(user.username), table=table, user=usr, obj_id=user.pk)
-
-            except Exception:
-                login = ''
+            except Exception as e:
                 postfix = str(time.time()).split('.')[1]
                 login = LoginGenerator().create_login(self.description, postfix)
                 user = User.objects.create_user(username=login, password=password)
@@ -126,12 +116,13 @@
             table = 'core_customer'
 
         clog = Protocol()
+        kwargs.clear()
         try:
             super(Customer, self).save(*args, **kwargs)
             clog.save(action=action, obj=str(self), table=table, user=usr, obj_id=self.pk)
-        except Exception:
+        except Exception as e:
             clog.save(clog.save(action=action, obj=str(self), table=table, user=usr,
-                                obj_id=self.pk), error=str(Exception))
+                                obj_id=self.pk), error=str(e))
         return password
 
     def activate(self):
@@ -154,38 +145,29 @@
     def save(self, *args, **kwargs):
         error = kwargs.get('error')
         action = kwargs.get('action')
-
-        if 'user' in kwargs:
-            self.user = kwargs['user']
-            del(kwargs['user'])
-        elif 'obj' in kwargs:
-            obj = str(kwargs['obj'])
-            del(kwargs['obj'])
-        elif 'table' in kwargs:
-            table = str(kwargs['table'])
-            del(kwargs['table'])
-        elif 'obj_id' in kwargs:
-            obj_id = str(kwargs['obj_id'])
-            del(kwargs['obj_id'])
+        self.user = str(kwargs.get('user'))
+        obj = str(kwargs.get('obj'))
+        table = str(kwargs.get('table'))
+        obj_id = str(kwargs.get('obj_id'))
 
         if error:
             self.action = 'Ошибка: ' + error + 'При попытке внести изменения в таблицу ' + table + \
-                          ' пользователем ' + self.user + './n' + \
+                          ' пользователем ' + self.user + '.\n' + \
                           'Объект:' + obj + '. ID записи:' + obj_id + '. Действие: ' + action
 
         if action == 'delete':
-            self.action = 'Удален ' + obj + ' пользователем ' + self.user + './n' \
+            self.action = 'Удален ' + obj + ' пользователем ' + self.user + '.\n' \
                           + 'Таблица:' + table + '. ID записи:' + obj_id
         elif action == 'change':
-            self.action = 'Изменен ' + obj + ' пользователем ' + str(self.user) + './n' \
+            self.action = 'Изменен ' + obj + ' пользователем ' + self.user + '.\n' \
                       + 'Таблица:' + table + '. ID записи:' + obj_id
         elif action == 'add':
-            self.action = 'Добавлен ' + obj + ' пользователем ' + self.user + './n' \
+            self.action = 'Добавлен ' + obj + ' пользователем ' + self.user + '.\n' \
                           + 'Таблица ' + table + '. ID записи: ' + obj_id
         else:
-            self.action = 'Действие не определено. Пользователь:' + self.user + ', объект: ' + object + '.'
+            self.action = 'Действие не определено. Пользователь:' + self.user + ', объект: ' + obj + '.'
 
-        kwargs = {}
+        kwargs.clear()
 
         super(Protocol, self).save(*args, **kwargs)
 
Index: core/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/views.py	(revision 72558ae70d2e3473e7c4b2a8846c7b29c920cda6)
+++ core/views.py	(date 1557115294401)
@@ -85,8 +85,12 @@
     if request.method == 'POST':
         form = CustomerForm(request.POST, instance=account)
         if form.is_valid():
-            password = account.save(username=str(usr.username))
-            return redirect('account_detail', customer_id=customer_id, password=password)
+            password = account.save(username=usr.username)
+
+            if password:
+                return redirect('account_detail', customer_id=customer_id, password=password)
+            else:
+                return redirect('account_detail', customer_id=customer_id)
     else:
         form = CustomerForm(instance=account)
 
